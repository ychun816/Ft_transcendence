services:

# logger a check apres avoir enlever les consoles logs

  dev:
    user: "0:0"
    container_name: trans-dev
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
      # target: dev
    volumes:
      - ..:/app
      - /app/node_modules
    ports:
      - "${MAIN_PORT}:3002"
      - "${METRICS_PORT}:3001"
      - "${HTTP_REDIRECT_PORT}:8080"
      - "${PRISMA_PORT}:5555"
    environment:
      - NODE_ENV=production
      - DEBUG=true
      - LOGSTASH_HOST=${LOGSTASH_HOST}
      - LOGSTASH_PORT=${LOGSTASH_PORT}
      - ELASTIC_URL=${ELASTIC_URL}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - MAIN_PORT=${MAIN_PORT}
      - METRICS_PORT=${METRICS_PORT}
      - HTTP_REDIRECT_PORT=${HTTP_REDIRECT_PORT}
      - PUBLIC_IP=${PUBLIC_IP}
      - COOKIE_SECRET=${COOKIE_SECRET}
      - SECURITY_KEY=${SECURITY_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    restart: unless-stopped
    depends_on:
      - logstash
    networks:
      - app-network


  elasticsearch:
    # user: "0:0"
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: trans-elasticsearch
    environment:
      - cluster.name=${CLUSTER_NAME}
      - node.name=${NODE_NAME}
      - discovery.type=single-node
      - xpack.security.enabled=true
      - "ES_JAVA_OPTS=${ES_JAVA_OPTS}"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.license.self_generated.type=basic
    ports:
      - "${ELASTIC_PORT}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./../monitoring/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - app-network
    restart: unless-stopped



  log-cleanup:
    user: "0:0"
    image: debian:bookworm-slim
    container_name: trans-log-cleanup
    environment:
      - ELASTIC_URL=${ELASTIC_URL}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      - elasticsearch
    volumes:
      - ./../monitoring/scripts/logs-cleanup.sh:/usr/local/bin/logs-cleanup.sh:ro
      - ./../monitoring/scripts/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
      - log_cleanup_data:/var/log
      - ./../monitoring/scripts/logs-cleanup:/etc/cron.d/logs-cleanup:ro
    command: ["sh", "-c", "/usr/local/bin/entrypoint.sh"]
    restart: unless-stopped
    networks:
      - app-network



  logstash:
    user: "0:0"
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: trans-logstash
    ports:
      - "${LOGSTASH_PORT}:5044"
    volumes:
      - ./../monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    environment:
      - "LS_JAVA_OPTS=${LS_JAVA_OPTS}"
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOST=${ELASTIC_HOST}
      - LOGSTASH_HOST=${LOGSTASH_HOST}
      - LOGSTASH_PORT=${LOGSTASH_PORT}
    networks:
      - app-network
    restart: unless-stopped



  kibana:
    build:
      context: ./../monitoring/kibana
      dockerfile: Dockerfile
    container_name: trans-kibana
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      - KIBANA_PORT=${KIBANA_PORT}
      - ELASTIC_URL=${ELASTIC_URL}
      - SERVER_NAME=${KIBANA_SERV_NAME}
      - REPORTING_KEY=${REPORTING_KEY}
      - SECURITY_KEY=${SECURITY_KEY}
      - SAVED_OBJECTS_KEY=${SAVED_OBJECTS_KEY}
      # - XPACK_SECURITY_ENABLED=true
      - xpack.security.enabled=true
      - XPACK_SECURITY_ENROLLMENT_ENABLED=false
      - LOGGING_ROOT_LEVEL=info
    volumes:
      - ./../monitoring/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      # - ./../monitoring/kibana/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
      - shared_data:/shared
      - kibana_data:/usr/share/kibana/data
    entrypoint: ["/usr/local/bin/entrypoint.sh"]
    depends_on:
      - elasticsearch
    networks:
      - app-network
    restart: unless-stopped


  kibana-init:
    container_name: trans-init-kibana
    image: debian:bookworm-slim
    depends_on:
      - kibana
    environment:
      - ELASTIC_URL=${ELASTIC_URL}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./../monitoring/kibana/saved_objects:/usr/share/kibana/saved_objects:ro
      - ./../monitoring/kibana/init.sh:/init.sh:ro
      - shared_data:/shared
    command: ["sh", "-c", "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl && /init.sh"]
    restart: "no"
    networks:
      - app-network



  prometheus:
    user: "0:0"
    image: prom/prometheus:latest
    container_name: trans-prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./../monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - app-network
    restart: unless-stopped



  node-exporter:
    user: "0:0"
    image: prom/node-exporter:latest
    container_name: trans-node-exporter
    ports:
      - "${NODE_EXP_PORT}:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      # - '--collector.systemd'
      - '--collector.processes'
    networks:
      - app-network
    pid: host
    restart: unless-stopped



  grafana:
    user: "0:0"
    image: grafana/grafana:latest
    container_name: trans-grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
    - ./../monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    - ./../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - GF_PROVISIONING_ENABLED=true
      - GF_LOG_LEVEL=info
      - GF_METRICS_ENABLED=true
      - GF_USERS_HOME_PAGE=${GRAFANA_DASHBOARD}
      - GF_SECURITY_COOKIE_SECURE=false  # a passer en 'true' en production apres implementation de HTTPS
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_DASHBOARDS_VERSIONS_TO_KEEP=10
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: unless-stopped



  alertmanager:
    user: "0:0"
    container_name: trans-alertmanager
    image: prom/alertmanager:latest
    ports:
      - "${ALERT_PORT}:9093"
    volumes:
      - ./../monitoring/alertmanager/alertmanager.yml.template:/etc/alertmanager/alertmanager.yml.template:ro
      - ./../monitoring/alertmanager/templates/email.tmpl:/etc/alertmanager/email.tmpl:ro
      - alertmanager_data:/alertmanager
      - ./../monitoring/alertmanager/entrypoint.sh:/entrypoint.sh:ro
    environment:
      - ALERT_PORT=${ALERT_PORT}
      - ALERT_EMAIL=${ALERT_EMAIL}
      - ALERT_PASSWORD=${ALERT_PASSWORD}
    entrypoint: ["/entrypoint.sh"]
      # - '--config.file=/etc/alertmanager/alertmanager.yml'
      # - '--storage.path=/alertmanager'
      # - '--web.external-url=http://localhost:${ALERT_PORT}'
      # - '--cluster.listen-address='
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: unless-stopped


volumes:
  elasticsearch_data:
  kibana_data:
  prometheus_data:
  shared_data:
  log_cleanup_data:
  grafana_data:
  alertmanager_data:


networks:
  app-network:
    name: app-network
    driver: bridge
